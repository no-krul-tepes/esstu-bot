// src/handlers/schedule.handler.ts
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { logger } from '../utils/logger.js';
import { getChatByExternalId, getGroupById } from '../services/database.service.js';
import { getWeekScheduleForGroup, hasLessonsInSchedule } from '../services/schedule.service.js';
import { getCurrentWeekType } from '../utils/week-calculator.js';
import { EMOJI } from '../config/constants.js';
import type { BotContext, DaySchedule, LessonDisplay, WeekType } from '../types';

export async function handleSchedule(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        const externalChatId = chatId.toString();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
        const chat = await getChatByExternalId(externalChatId);

        if (!chat) {
            await ctx.reply(
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
            );
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        const group = await getGroupById(chat.groupid);

        logger.info('Generating schedule', {
            userId: ctx.from?.id,
            chatId: chat.chatid,
            groupId: group.groupid,
            groupName: group.name
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        const loadingMessage = await ctx.reply(
            `${EMOJI.CALENDAR} –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${group.name}...`
        );

        const schedule = await getWeekScheduleForGroup(group.groupid);

        if (!hasLessonsInSchedule(schedule)) {
            await ctx.api.editMessageText(
                ctx.chat.id,
                loadingMessage.message_id,
                `${EMOJI.CALENDAR} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${group.name}\n\n` +
                'üì≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.'
            );
            return;
        }

        const weekType = getCurrentWeekType();
        const scheduleText = buildScheduleMessage({
            groupName: group.name,
            weekType,
            schedule,
        });

        await ctx.api.editMessageText(
            ctx.chat.id,
            loadingMessage.message_id,
            scheduleText
        );

        logger.info('Schedule sent successfully', {
            userId: ctx.from?.id,
            chatId: chat.chatid,
            groupId: group.groupid
        });

    } catch (error) {
        logger.error('Failed to handle schedule command', { error });
        throw error;
    }
}

interface ScheduleMessageParams {
    groupName: string;
    weekType: WeekType;
    schedule: DaySchedule[];
}

const LESSON_NUMBER_EMOJI: Record<number, string> = {
    0: '0Ô∏è‚É£',
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£',
    6: '6Ô∏è‚É£',
    7: '7Ô∏è‚É£',
    8: '8Ô∏è‚É£',
    9: '9Ô∏è‚É£',
    10: 'üîü',
};

function buildScheduleMessage({ groupName, weekType, schedule }: ScheduleMessageParams): string {
    const weekLabel = formatWeekTypeLabel(weekType);

    const daysText = schedule.map(formatDaySection).join('\n\n');

    return [
        `${EMOJI.CALENDAR} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupName}`,
        `–ù–µ–¥–µ–ª—è: ${weekLabel}`,
        '',
        daysText,
    ].filter(Boolean).join('\n').trim();
}

function formatWeekTypeLabel(weekType: WeekType): string {
    return weekType === 'even' ? '–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è' : '–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è';
}

function formatDaySection(day: DaySchedule): string {
    const header = `üìÜ ${day.dayName}, ${format(day.date, 'd MMMM', { locale: ru })}`;

    if (day.lessons.length === 0) {
        return `${header}\n   ‚Ä¢ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`;
    }

    const lessonsText = day.lessons.map(formatLessonLine).join('\n');

    return `${header}\n${lessonsText}`;
}

function formatLessonLine(lesson: LessonDisplay): string {
    const lessonType = formatLessonTypeLabel(lesson.type);
    const lines = [
        `   ${formatLessonNumberEmoji(lesson.number)} ${lesson.startTime}‚Äì${lesson.endTime} ‚Äî ${lesson.name}${lessonType ? ` (${lessonType})` : ''}`,
    ];

    if (lesson.teacher) {
        lines.push(`      ${EMOJI.TEACHER} ${lesson.teacher}`);
    }

    if (lesson.cabinet) {
        lines.push(`      ${EMOJI.ROOM} ${lesson.cabinet}`);
    }

    return lines.join('\n');
}

function formatLessonNumberEmoji(number: number): string {
    return LESSON_NUMBER_EMOJI[number] ?? `${number}.`;
}

function formatLessonTypeLabel(type: string | null): string | null {
    if (!type) {
        return null;
    }

    const normalized = type.trim().toLowerCase();
    const dictionary: Record<string, string> = {
        lecture: '–õ–µ–∫—Ü–∏—è',
        practice: '–ü—Ä–∞–∫—Ç–∏–∫–∞',
        practicum: '–ü—Ä–∞–∫—Ç–∏–∫–∞',
        laboratory: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è',
        lab: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è',
        seminar: '–°–µ–º–∏–Ω–∞—Ä',
        exam: '–≠–∫–∑–∞–º–µ–Ω',
        consultation: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        webinar: '–í–µ–±–∏–Ω–∞—Ä',
    };

    return dictionary[normalized] ?? capitalize(type.trim());
}

function capitalize(value: string): string {
    if (!value) {
        return value;
    }

    return value.charAt(0).toUpperCase() + value.slice(1);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export async function sendScheduleAfterRegistration(ctx: BotContext): Promise<void> {
    try {
        await handleSchedule(ctx);
    } catch (error) {
        logger.error('Failed to send schedule after registration', { error });
        await ctx.reply(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /schedule'
        );
    }
}