// src/handlers/schedule.handler.ts
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

import { InputFile } from 'grammy';
import { logger } from '../utils/logger.js';
import { getChatByExternalId, getGroupById } from '../services/database.service.js';
import { getWeekScheduleForGroup, hasLessonsInSchedule } from '../services/schedule.service.js';
import { generateScheduleImage } from '../utils/image-generator.js';
import { getCurrentWeekType } from '../utils/week-calculator.js';
import { EMOJI } from '../config/constants.js';
import type { BotContext } from '../types';

export async function handleSchedule(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        const externalChatId = chatId.toString();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
        const chat = await getChatByExternalId(externalChatId);

        if (!chat) {
            await ctx.reply(
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
            );
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        const group = await getGroupById(chat.groupid);

        logger.info('Generating schedule', {
            userId: ctx.from?.id,
            chatId: chat.chatid,
            groupId: group.groupid,
            groupName: group.name
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        const loadingMessage = await ctx.reply(
            `${EMOJI.CALENDAR} –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${group.name}...`
        );

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
        const schedule = await getWeekScheduleForGroup(group.groupid);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Ä–æ–∫–∏
        if (!hasLessonsInSchedule(schedule)) {
            await ctx.api.editMessageText(
                ctx.chat.id,
                loadingMessage.message_id,
                `${EMOJI.CALENDAR} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${group.name}\n\n` +
                'üì≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.'
            );
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const weekType = getCurrentWeekType();
        const imageBuffer = await generateScheduleImage({
            groupName: group.name,
            weekType,
            lessons: schedule,
            generatedAt: new Date(),
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await ctx.replyWithPhoto(new InputFile(imageBuffer), {
            caption: `${EMOJI.CALENDAR} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${group.name}`,
        });

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);

        logger.info('Schedule sent successfully', {
            userId: ctx.from?.id,
            chatId: chat.chatid,
            groupId: group.groupid
        });

    } catch (error) {
        logger.error('Failed to handle schedule command', { error });
        throw error;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export async function sendScheduleAfterRegistration(ctx: BotContext): Promise<void> {
    try {
        await handleSchedule(ctx);
    } catch (error) {
        logger.error('Failed to send schedule after registration', { error });
        await ctx.reply(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /schedule'
        );
    }
}