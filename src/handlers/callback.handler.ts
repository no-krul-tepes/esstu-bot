// src/handlers/callback.handler.ts
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { logger } from '../utils/logger.js';
import { parseCallbackData } from '../utils/validators.js';
import { CallbackAction } from '../types';
import {
    handleAgreeTerms,
    handleDepartmentSelection,
    handleCourseSelection,
    handleGroupSelection,
    handleNavigateBack,
    handleGroupPagination,
    isChangingGroupMode,
} from './registration.handler.js';
import {
    handleToggleNotifications,
    handleToggleEveryLesson,
    handleChangeNotificationTime,
    handleSetNotificationTime,
    handleChangeGroup,
    handleConfirmChangeGroup,
    handleCancelAction,
} from './settings.handler.js';
import { getChatByExternalId, getGroupById, countChatsByGroupId } from '../services/database.service.js';
import { MESSAGES } from '../config/constants.js';
import type { BotContext } from '../types';
import { changeGroup } from '../services/settings.service.js';
import { triggerGroupParsing } from '../services/parse.service.js';

export async function handleCallbackQuery(ctx: BotContext): Promise<void> {
    const callbackData = ctx.callbackQuery?.data;

    if (!callbackData) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
        return;
    }

    if (callbackData === 'noop') {
        await ctx.answerCallbackQuery();
        return;
    }

    try {
        const { action, value } = parseCallbackData(callbackData);

        logger.debug('Callback query received', {
            userId: ctx.from?.id,
            action,
            value,
            isChangingGroup: isChangingGroupMode(ctx),
        });

        switch (action) {
            case CallbackAction.AGREE_TERMS:
                await handleAgreeTerms(ctx);
                break;

            case CallbackAction.SELECT_DEPARTMENT:
                await handleDepartmentSelection(ctx);
                break;

            case CallbackAction.SELECT_COURSE:
                await handleCourseSelection(ctx);
                break;

            case CallbackAction.SELECT_GROUP:
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–µ–º –ª–∏ –º—ã –≥—Ä—É–ø–ø—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if (isChangingGroupMode(ctx) && value) {
                    await handleGroupChangeComplete(ctx, parseInt(value, 10));
                } else {
                    await handleGroupSelection(ctx);
                }
                break;

            case CallbackAction.NAVIGATE_BACK:
                await handleNavigateBack(ctx);
                break;

            case CallbackAction.NAVIGATE_NEXT:
                if (value) {
                    await handleGroupPagination(ctx, parseInt(value, 10));
                }
                break;

            case CallbackAction.NAVIGATE_PREV:
                if (value) {
                    await handleGroupPagination(ctx, parseInt(value, 10));
                }
                break;


            // Settings actions
            case CallbackAction.TOGGLE_NOTIFICATIONS:
                await handleToggleNotifications(ctx);
                break;

            case CallbackAction.TOGGLE_EVERY_LESSON:
                await handleToggleEveryLesson(ctx);
                break;

            case CallbackAction.CHANGE_NOTIFICATION_TIME:
                await handleChangeNotificationTime(ctx);
                break;

            case CallbackAction.SET_NOTIFICATION_TIME:
                await handleSetNotificationTime(ctx);
                break;

            case CallbackAction.CHANGE_GROUP:
                await handleChangeGroup(ctx);
                break;

            case CallbackAction.CONFIRM_CHANGE_GROUP:
                await handleConfirmChangeGroup(ctx);
                break;

            case CallbackAction.CANCEL_ACTION:
                await handleCancelAction(ctx);
                break;

            default:
                await ctx.answerCallbackQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
                logger.warn('Unknown callback action', { action, value });
                break;
        }
    } catch (error) {
        logger.error('Failed to handle callback query', { callbackData, error });
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã
async function handleGroupChangeComplete(ctx: BotContext, newGroupId: number): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        await ctx.answerCallbackQuery('‚è≥ –ú–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—É...');

        const externalChatId = chatId.toString();

        logger.info('Completing group change', {
            userId: ctx.from?.id,
            externalChatId,
            newGroupId,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –≤ –ë–î
        const existingChat = await getChatByExternalId(externalChatId);

        if (!existingChat) {
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
            await ctx.reply(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /start'
            );

            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            ctx.session.settings = undefined;
            ctx.session.selectedDepartmentId = undefined;
            ctx.session.selectedCourse = undefined;
            ctx.session.selectedGroupId = undefined;

            return;
        }

        const existingSubscribers = await countChatsByGroupId(newGroupId);
        const shouldTriggerParser = existingSubscribers === 0;

        // –ú–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
        await changeGroup(externalChatId, newGroupId);
        const newGroup = await getGroupById(newGroupId);

        if (shouldTriggerParser) {
            await triggerGroupParsing(newGroupId);
        }

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.deleteMessage();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const message = MESSAGES.SETTINGS.GROUP_CHANGED.replace('{groupName}', newGroup.name);

        await ctx.reply(message, { parse_mode: 'Markdown' });

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await ctx.reply(
            'üìÖ –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã?\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /schedule'
        );

        ctx.session.shouldSendSchedule = false;

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        ctx.session.settings = undefined;
        ctx.session.selectedDepartmentId = undefined;
        ctx.session.selectedCourse = undefined;
        ctx.session.selectedGroupId = undefined;
        ctx.session.currentPage = undefined;

        logger.info('Group changed successfully', {
            userId: ctx.from?.id,
            chatId: existingChat.chatid,
            oldGroupId: existingChat.groupid,
            newGroupId,
            newGroupName: newGroup.name,
        });
    } catch (error) {
        logger.error('Failed to complete group change', {
            error,
            newGroupId,
            userId: ctx.from?.id,
        });

        await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings'
        );

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        ctx.session.shouldSendSchedule = false;
        ctx.session.settings = undefined;
    }
}