// src/handlers/settings.handler.ts
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

import { MESSAGES, EMOJI } from '../config/constants.js';
import { logger } from '../utils/logger.js';
import { parseCallbackData } from '../utils/validators.js';
import {
    getChatByExternalId,
    getGroupById,
} from '../services/database.service.js';
import {
    toggleNotifications,
    toggleEveryLessonNotification,
    changeNotificationTime,
    changeGroup,
    formatNotificationStatus,
} from '../services/settings.service.js';
import {
    createSettingsMainKeyboard,
    createChangeGroupConfirmKeyboard,
    createNotificationTimeKeyboard,
} from '../keyboards/settings.keyboard.js';
import { resetSession, updateSessionStep } from '../middleware/session.middleware.js';
import { RegistrationStep } from '../types/bot.js';
import { showDepartmentSelection } from './registration.handler.js';
import type { BotContext } from '../types/bot.js';

export async function handleSettings(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        const externalChatId = chatId.toString();

        logger.debug('Settings command received', {
            userId: ctx.from?.id,
            externalChatId
        });

        const chat = await getChatByExternalId(externalChatId);

        if (!chat) {
            await ctx.reply(
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
            );
            return;
        }

        const group = await getGroupById(chat.groupid);

        const settingsText = formatSettingsMessage(chat, group);

        await ctx.reply(settingsText, {
            parse_mode: 'Markdown',
            reply_markup: createSettingsMainKeyboard(chat, group),
        });

        logger.info('Settings opened', {
            userId: ctx.from?.id,
            chatId: chat.chatid,
            groupId: chat.groupid,
        });
    } catch (error) {
        logger.error('Failed to handle settings command', {
            error,
            userId: ctx.from?.id,
            chatId
        });
        throw error;
    }
}

export async function handleToggleNotifications(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        const externalChatId = chatId.toString();
        const updatedChat = await toggleNotifications(externalChatId);
        const group = await getGroupById(updatedChat.groupid);

        const message = updatedChat.isnotificationenabled
            ? MESSAGES.SETTINGS.NOTIFICATIONS_ENABLED
            : MESSAGES.SETTINGS.NOTIFICATIONS_DISABLED;

        await ctx.answerCallbackQuery(message);

        const settingsText = formatSettingsMessage(updatedChat, group);

        await ctx.editMessageText(settingsText, {
            parse_mode: 'Markdown',
            reply_markup: createSettingsMainKeyboard(updatedChat, group),
        });

        logger.info('Notifications toggled', {
            userId: ctx.from?.id,
            enabled: updatedChat.isnotificationenabled,
        });
    } catch (error) {
        logger.error('Failed to toggle notifications', { error });
        throw error;
    }
}

export async function handleToggleEveryLesson(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        const externalChatId = chatId.toString();
        const updatedChat = await toggleEveryLessonNotification(externalChatId);
        const group = await getGroupById(updatedChat.groupid);

        const message = updatedChat.notifyoneverylesson
            ? MESSAGES.SETTINGS.EVERY_LESSON_ENABLED
            : MESSAGES.SETTINGS.EVERY_LESSON_DISABLED;

        await ctx.answerCallbackQuery(message);

        const settingsText = formatSettingsMessage(updatedChat, group);

        await ctx.editMessageText(settingsText, {
            parse_mode: 'Markdown',
            reply_markup: createSettingsMainKeyboard(updatedChat, group),
        });

        logger.info('Every lesson notification toggled', {
            userId: ctx.from?.id,
            enabled: updatedChat.notifyoneverylesson,
        });
    } catch (error) {
        logger.error('Failed to toggle every lesson notification', { error });
        throw error;
    }
}

export async function handleChangeNotificationTime(ctx: BotContext): Promise<void> {
    await ctx.answerCallbackQuery();

    await ctx.editMessageText(MESSAGES.SETTINGS.NOTIFICATION_TIME_SELECT, {
        reply_markup: createNotificationTimeKeyboard(),
    });

    logger.debug('Notification time selection opened', {
        userId: ctx.from?.id,
    });
}

export async function handleSetNotificationTime(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId || !ctx.callbackQuery?.data) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞');
        return;
    }

    try {
        const { value } = parseCallbackData(ctx.callbackQuery.data);

        if (!value) {
            await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return;
        }

        const externalChatId = chatId.toString();
        const updatedChat = await changeNotificationTime(externalChatId, value);
        const group = await getGroupById(updatedChat.groupid);

        const message = MESSAGES.SETTINGS.NOTIFICATION_TIME_CHANGED.replace(
            '{time}',
            value.slice(0, 5)
        );

        await ctx.answerCallbackQuery(message);

        const settingsText = formatSettingsMessage(updatedChat, group);

        await ctx.editMessageText(settingsText, {
            parse_mode: 'Markdown',
            reply_markup: createSettingsMainKeyboard(updatedChat, group),
        });

        logger.info('Notification time changed', {
            userId: ctx.from?.id,
            newTime: value,
        });
    } catch (error) {
        logger.error('Failed to set notification time', { error });
        throw error;
    }
}

export async function handleChangeGroup(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        const externalChatId = chatId.toString();
        const chat = await getChatByExternalId(externalChatId);

        if (!chat) {
            await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const group = await getGroupById(chat.groupid);

        await ctx.answerCallbackQuery();

        const confirmText = MESSAGES.SETTINGS.CHANGE_GROUP_CONFIRM.replace(
            '{groupName}',
            group.name
        );

        await ctx.editMessageText(confirmText, {
            reply_markup: createChangeGroupConfirmKeyboard(),
        });

        logger.debug('Change group confirmation shown', {
            userId: ctx.from?.id,
            currentGroupId: group.groupid,
        });
    } catch (error) {
        logger.error('Failed to show change group confirmation', { error });
        throw error;
    }
}

export async function handleConfirmChangeGroup(ctx: BotContext): Promise<void> {
    const chatId = ctx.chat?.id;

    if (!chatId) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
        return;
    }

    try {
        await ctx.answerCallbackQuery('–ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã...');

        // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await ctx.deleteMessage();

        // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await ctx.reply(
            'üîÑ **–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã**\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ.',
            { parse_mode: 'Markdown' }
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
        ctx.session.settings = { changingGroup: true };
        ctx.session.agreedToTerms = true; // –û–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–∏—è

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
        await showDepartmentSelection(ctx);

        logger.info('Group change process started', {
            userId: ctx.from?.id,
            chatId,
        });
    } catch (error) {
        logger.error('Failed to start group change', { error });

        await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );

        throw error;
    }
}

export async function handleCancelAction(ctx: BotContext): Promise<void> {
    await ctx.answerCallbackQuery();
    await ctx.deleteMessage();

    logger.debug('Settings action cancelled', {
        userId: ctx.from?.id,
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function formatSettingsMessage(chat: any, group: any): string {
    const groupInfo = MESSAGES.SETTINGS.GROUP_INFO
        .replace('{groupName}', group.name)
        .replace('{course}', group.course.toString());

    const notifyStatus = chat.isnotificationenabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : 'üîï –û—Ç–∫–ª—é—á–µ–Ω—ã';
    const time = chat.notificationtime.slice(0, 5);
    const everyLesson = chat.notifyoneverylesson ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç';

    const notificationInfo = MESSAGES.SETTINGS.NOTIFICATION_INFO
        .replace('{status}', notifyStatus)
        .replace('{time}', time)
        .replace('{everyLesson}', everyLesson);

    return `${MESSAGES.SETTINGS.MAIN}\n\n${groupInfo}\n\n${notificationInfo}`;
}